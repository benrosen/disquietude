{"version":3,"sources":["components/Container.tsx","components/IncrementButton.tsx","components/Separator.tsx","components/Subtitle.tsx","components/Title.tsx","hooks/useWeek.ts","functions/getWeekFromYearByIndex.ts","functions/shuffle.ts","hooks/useSeasonLoader.ts","hooks/useFleeting.ts","functions/abridge.ts","reportWebVitals.ts","index.tsx","App.tsx","hooks/useSeed.ts","hooks/useIncrement.ts","hooks/useYear.ts"],"names":["children","style","display","flexDirection","height","justifyContent","textAlign","onClick","marginBottom","padding","fontFamily","fontSize","fontStyle","fontWeight","letterSpacing","index","year","useState","week","setWeek","useEffect","spring","summer","fall","winter","getWeekFromYearByIndex","items","map","value","sort","Math","random","a","b","isFleeting","useRouteMatch","useCallback","season","protectedIndices","rejectedIndices","shuffle","reduction","filter","includes","_value","slice","length","abridge","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","component","seed","useParams","seedrandom","global","useSeed","count","setCount","useIncrement","increment","setYear","loadSeason","useSeasonLoader","yearData","data","useYear","useWeek","Container","Title","Subtitle","prompt","Separator","IncrementButton","path","document","getElementById"],"mappings":"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","file":"static/js/main.b2d7b46b.chunk.js","sourcesContent":["import { PropsWithChildren } from \"react\";\n\nexport default ({ children }: PropsWithChildren<{}>) => (\n  <div\n    style={{\n      display: \"flex\",\n      flexDirection: \"column\",\n      height: \"100vh\",\n      justifyContent: \"center\",\n      textAlign: \"center\",\n    }}\n  >\n    {children}\n  </div>\n);\n","import { MouseEventHandler } from \"react\";\n\nexport default ({\n  onClick,\n}: {\n  onClick: MouseEventHandler<HTMLButtonElement>;\n}) => (\n  <div>\n    <button\n      style={{\n        marginBottom: \"1rem\",\n        padding: \".5rem 1rem\",\n        fontFamily: \"serif\",\n        fontSize: \"1rem\",\n      }}\n      onClick={onClick}\n    >\n      Next\n    </button>\n  </div>\n);\n","export default () => (\n  <div\n    style={{\n      fontFamily: \"serif\",\n      fontStyle: \"italic\",\n      fontWeight: \"bold\",\n      padding: \"1rem\",\n    }}\n  >\n    or\n  </div>\n);\n","import { PropsWithChildren } from \"react\";\n\nexport default ({ children }: PropsWithChildren<{}>) => (\n  <h2\n    style={{\n      fontFamily: \"serif\",\n      textAlign: \"center\",\n    }}\n  >\n    {children}\n  </h2>\n);\n","import { PropsWithChildren } from \"react\";\n\nexport default ({ children }: PropsWithChildren<{}>) => (\n  <h1\n    style={{\n      fontFamily: \"serif\",\n      letterSpacing: \".125rem\",\n      fontSize: \"3rem\",\n      fontStyle: \"italic\",\n      padding: \"1rem\",\n      textAlign: \"center\",\n    }}\n  >\n    {children}\n  </h1>\n);\n","import { useEffect, useState } from \"react\";\n\nimport { Week } from \"../types/Week\";\nimport { Year } from \"../types/Year\";\nimport getWeekFromYearByIndex from \"../functions/getWeekFromYearByIndex\";\n\nexport default (index: number, year: Year): Week => {\n  const [week, setWeek] = useState<Week>([]);\n  useEffect(() => {\n    setWeek(() => getWeekFromYearByIndex(index, year));\n  }, [index, year]);\n  return week;\n};\n","import { Week } from \"../types/Week\";\nimport { Year } from \"../types/Year\";\n\nexport default (index: number, year: Year): Week =>\n  year\n    ? [...year.spring, ...year.summer, ...year.fall, ...year.winter][index]\n    : [];\n","export default <T extends any[]>(items: T): T =>\n  items\n    .map((value) => ({ value, sort: Math.random() }))\n    .sort((a, b) => a.sort - b.sort)\n    .map(({ value }) => value) as T;\n","import { Season } from \"../types/Season\";\nimport abridge from \"../functions/abridge\";\nimport shuffle from \"../functions/shuffle\";\nimport { useCallback } from \"react\";\nimport useFleeting from \"./useFleeting\";\n\nexport default () => {\n  const isFleeting = useFleeting();\n  return useCallback(\n    (season: Season, protectedIndices: number[], rejectedIndices: number[]) =>\n      shuffle(\n        isFleeting\n          ? abridge(season, 5, protectedIndices, rejectedIndices)\n          : season\n      ),\n    [isFleeting]\n  );\n};\n","import { useRouteMatch } from \"react-router\";\n\nexport default () => (useRouteMatch(\"/fleeting/:seed?\") ? true : false);\n","import shuffle from \"./shuffle\";\n\nexport default <T extends any[]>(\n  items: T,\n  reduction: number,\n  protectedIndices: number[] = [],\n  rejectedIndices: number[] = []\n): T => {\n  rejectedIndices = rejectedIndices.filter(\n    (value) => !protectedIndices.includes(value)\n  );\n  return [\n    ...shuffle(\n      items\n        .filter(\n          (_value, index) =>\n            !(\n              protectedIndices.includes(index) ||\n              rejectedIndices.includes(index)\n            )\n        )\n        .map((value, index) => ({ index, value }))\n    )\n      .slice(reduction - rejectedIndices.length)\n      .map(({ index }) => index),\n    ...protectedIndices,\n  ].map((value) => items[value]) as T;\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"./index.css\";\n\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter basename=\"/disquietude\">\n      <Switch>\n        <Route component={App} path={[\"/fleeting/:seed?\", \"/:seed?\"]} />\n      </Switch>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import Container from \"./components/Container\";\nimport { Fragment } from \"react\";\nimport IncrementButton from \"./components/IncrementButton\";\nimport Separator from \"./components/Separator\";\nimport Subtitle from \"./components/Subtitle\";\nimport Title from \"./components/Title\";\nimport useIncrement from \"./hooks/useIncrement\";\nimport useSeed from \"./hooks/useSeed\";\nimport useWeek from \"./hooks/useWeek\";\nimport useYear from \"./hooks/useYear\";\n\nexport default () => {\n  useSeed();\n  const [count, increment] = useIncrement();\n  const year = useYear();\n  const week = useWeek(count, year);\n  return (\n    <Container>\n      <Title>Disquietude</Title>\n      <Subtitle>{`~ Week ${count + 1} ~`}</Subtitle>\n      <div style={{ padding: \"2rem\" }}>\n        {week &&\n          week.map((prompt, index) => (\n            <Fragment key={index}>\n              {prompt}\n              {index < week.length - 1 ? <Separator /> : null}\n            </Fragment>\n          ))}\n      </div>\n      <IncrementButton onClick={increment} />\n    </Container>\n  );\n};\n","import seedrandom from \"seedrandom\";\nimport { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nexport default () => {\n  const { seed } = useParams<{ seed: string }>();\n  useEffect(() => {\n    seedrandom(seed, { global: true });\n  }, [seed]);\n};\n","import { useCallback, useState } from \"react\";\n\nexport default (): [number, () => void] => {\n  const [count, setCount] = useState(0);\n  const increment = useCallback(() => {\n    setCount((count) => count + 1);\n  }, []);\n  return [count, increment];\n};\n","import { useEffect, useState } from \"react\";\n\nimport { Year } from \"../types/Year\";\nimport data from \"../data/year.json\";\nimport useSeasonLoader from \"./useSeasonLoader\";\n\nexport default (): Year => {\n  const [year, setYear] = useState<Year>(null);\n  const loadSeason = useSeasonLoader();\n  useEffect(() => {\n    setYear(() => {\n      const yearData = data as unknown as Year;\n      return yearData\n        ? ({\n            spring: loadSeason(yearData.spring, [], []),\n            summer: loadSeason(yearData.summer, [], [12]),\n            fall: loadSeason(yearData.fall, [], []),\n            winter: loadSeason(yearData.winter, [12], []),\n          } as Year)\n        : null;\n    });\n  }, []);\n  return year;\n};\n"],"sourceRoot":""}