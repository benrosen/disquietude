{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["shuffleSeason","season","map","value","sort","Math","random","a","b","useWeek","index","year","useState","week","setWeek","useEffect","spring","summer","fall","winter","getWeekByIndex","App","count","setCount","useCallback","useIncrement","incrementCount","setYear","yearData","data","useYear","style","fontFamily","letterSpacing","fontSize","fontStyle","padding","textAlign","marginTop","fontWeight","prompt","length","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uKA+BMA,EAAgB,SAACC,GACrB,OAAOA,EACJC,KAAI,SAACC,GAAD,MAAY,CAAEA,QAAOC,KAAMC,KAAKC,aACpCF,MAAK,SAACG,EAAGC,GAAJ,OAAUD,EAAEH,KAAOI,EAAEJ,QAC1BF,KAAI,qBAAGC,UAmBNM,EAAU,SAACC,EAAeC,GAAsB,IAAD,EAC3BC,mBAAe,IADY,mBAC5CC,EAD4C,KACtCC,EADsC,KAOnD,OALAC,qBAAU,WACRD,GAAQ,WACN,OApBiB,SAACJ,EAAeC,GACrC,OAAOA,GAAQD,GAAS,GAAKA,EAAQ,GACjC,sBAAIC,EAAKK,QAAT,YAAoBL,EAAKM,QAAzB,YAAoCN,EAAKO,MAAzC,YAAkDP,EAAKQ,SAAQT,GAC/D,GAiBOU,CAAeV,EAAOC,QAE9B,CAACD,EAAOC,IACJE,GAuFMQ,EAlEH,WAAO,IAAD,EAtCG,WAA6B,IAAD,EACrBT,mBAAS,GADY,mBACxCU,EADwC,KACjCC,EADiC,KAO/C,MAAO,CAACD,EALeE,uBAAY,WACjCD,GAAS,SAACD,GACR,OAAOA,EAAQ,OAEhB,KAiC6BG,GADhB,mBACTH,EADS,KACFI,EADE,KAEVf,EApBQ,WAAa,IAAD,EACFC,mBAAe,MADb,mBACnBD,EADmB,KACbgB,EADa,KAe1B,OAbAZ,qBAAU,WACRY,GAAQ,WACN,IAAMC,EAAWC,EACjB,OAAOD,EACF,CACCZ,OAAQhB,EAAc4B,EAASZ,QAC/BC,OAAQjB,EAAc4B,EAASX,QAC/BC,KAAMlB,EAAc4B,EAASV,MAC7BC,OAAQnB,EAAc4B,EAAST,SAEjC,UAEL,IACIR,EAKMmB,GACPjB,EAAOJ,EAAQa,EAAOX,GAC5B,OACE,eAAC,WAAD,WACE,qBACEoB,MAAO,CACLC,WAAY,qBACZC,cAAe,UACfC,SAAU,OACVC,UAAW,SACXC,QAAS,OACTC,UAAW,UAPf,4BAYA,sBAAKN,MAAO,CAAEO,UAAW,QAAzB,UACE,qBAAKP,MAAO,CAAEM,UAAW,UAAzB,SACE,qBACEN,MAAO,CACLC,WAAY,qBACZE,SAAU,SACVK,WAAY,QAJhB,0BAMYjB,EAAQ,EANpB,UAQF,qBAAKS,MAAO,CAAEK,QAAS,OAAQC,UAAW,UAA1C,SACGxB,EAAKX,KAAI,SAACsC,EAAQ9B,GACjB,OACE,eAAC,WAAD,WACE,8BAAM8B,IACL9B,EAAQG,EAAK4B,OAAS,EACrB,qBACEV,MAAO,CACLC,WAAY,qBACZG,UAAW,SACXI,WAAY,OACZH,QAAS,QALb,gBAUE,OAbS1B,WAmBvB,qBAAKqB,MAAO,CAAEM,UAAW,UAAzB,SACE,wBACEN,MAAO,CACLK,QAAS,aACTJ,WAAY,qBACZE,SAAU,QAEZQ,QAAShB,EANX,wB,OCvHOiB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCFdQ,EAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.c4449ac4.chunk.js","sourcesContent":["import { Fragment, useCallback, useEffect, useState } from \"react\";\n\nimport data from \"./year.json\";\n\ntype Year = null | {\n  spring: Season;\n  summer: Season;\n  fall: Season;\n  winter: Season;\n};\n\ntype Season = [\n  Week,\n  Week,\n  Week,\n  Week,\n  Week,\n  Week,\n  Week,\n  Week,\n  Week,\n  Week,\n  Week,\n  Week,\n  Week\n];\n\ntype Week = Prompt[];\n\ntype Prompt = string;\n\nconst shuffleSeason = (season: Season): Season => {\n  return season\n    .map((value) => ({ value, sort: Math.random() }))\n    .sort((a, b) => a.sort - b.sort)\n    .map(({ value }) => value) as Season;\n};\n\nconst getWeekByIndex = (index: number, year: Year): Week => {\n  return year && index >= 0 && index < 52\n    ? [...year.spring, ...year.summer, ...year.fall, ...year.winter][index]\n    : [];\n};\n\nconst useIncrement = (): [number, () => void] => {\n  const [count, setCount] = useState(0);\n  const incrementCount = useCallback(() => {\n    setCount((count) => {\n      return count + 1;\n    });\n  }, []);\n  return [count, incrementCount];\n};\n\nconst useWeek = (index: number, year: Year): Week => {\n  const [week, setWeek] = useState<Week>([]);\n  useEffect(() => {\n    setWeek(() => {\n      return getWeekByIndex(index, year);\n    });\n  }, [index, year]);\n  return week;\n};\n\nconst useYear = (): Year => {\n  const [year, setYear] = useState<Year>(null);\n  useEffect(() => {\n    setYear(() => {\n      const yearData = data as unknown as Year;\n      return yearData\n        ? ({\n            spring: shuffleSeason(yearData.spring),\n            summer: shuffleSeason(yearData.summer),\n            fall: shuffleSeason(yearData.fall),\n            winter: shuffleSeason(yearData.winter),\n          } as Year)\n        : null;\n    });\n  }, []);\n  return year;\n};\n\nconst App = () => {\n  const [count, incrementCount] = useIncrement();\n  const year = useYear();\n  const week = useWeek(count, year);\n  return (\n    <Fragment>\n      <div\n        style={{\n          fontFamily: \"Gentium Book Basic\",\n          letterSpacing: \".125rem\",\n          fontSize: \"3rem\",\n          fontStyle: \"italic\",\n          padding: \"1rem\",\n          textAlign: \"center\",\n        }}\n      >\n        The Quiet Year\n      </div>\n      <div style={{ marginTop: \"1rem\" }}>\n        <div style={{ textAlign: \"center\" }}>\n          <div\n            style={{\n              fontFamily: \"Gentium Book Basic\",\n              fontSize: \"1.5rem\",\n              fontWeight: \"bold\",\n            }}\n          >{`~ Week ${count + 1} ~`}</div>\n        </div>\n        <div style={{ padding: \"2rem\", textAlign: \"center\" }}>\n          {week.map((prompt, index) => {\n            return (\n              <Fragment key={index}>\n                <div>{prompt}</div>\n                {index < week.length - 1 ? (\n                  <div\n                    style={{\n                      fontFamily: \"Gentium Book Basic\",\n                      fontStyle: \"italic\",\n                      fontWeight: \"bold\",\n                      padding: \"1rem\",\n                    }}\n                  >\n                    or\n                  </div>\n                ) : null}\n              </Fragment>\n            );\n          })}\n        </div>\n      </div>\n      <div style={{ textAlign: \"center\" }}>\n        <button\n          style={{\n            padding: \".5rem 1rem\",\n            fontFamily: \"Gentium Book Basic\",\n            fontSize: \"1rem\",\n          }}\n          onClick={incrementCount}\n        >\n          Next\n        </button>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"./index.css\";\n\nimport App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}